# MLOps OCR Demo - CI/CD Pipeline
# Demonstrates automated testing, building, and deployment

name: MLOps OCR Demo CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.9'
  DOCKER_IMAGE: ocr-demo
  DOCKER_TAG: latest

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 mypy
        
    - name: Run code formatting check
      run: |
        black --check --diff src/ tests/
        
    - name: Run linting
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports
        
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          htmlcov/
          .coverage
          coverage.xml

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  # Job 3: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 4: Model Training and Validation
  model-training:
    name: Model Training and Validation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up MLflow
      run: |
        pip install mlflow
        mlflow server --host 0.0.0.0 --port 5000 &
        sleep 10
        
    - name: Run model training
      run: |
        python -c "
        import sys
        sys.path.append('src')
        from models.custom_ocr_model import CustomOCRModel
        from data.data_processor import DataProcessor
        
        # Initialize components
        model = CustomOCRModel()
        data_processor = DataProcessor()
        
        # Create sample data for training
        import os
        os.makedirs('data/raw', exist_ok=True)
        os.makedirs('data/processed', exist_ok=True)
        
        # Simulate training (in real scenario, you'd have actual data)
        print('Model training simulation completed')
        "
        
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts
        path: models/

  # Job 5: Integration Testing
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build, model-training]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d mlflow postgres redis
        
    - name: Wait for services to be ready
      run: |
        sleep 30
        
    - name: Run integration tests
      run: |
        docker-compose run --rm ocr-demo-test
        
    - name: Stop services
      run: |
        docker-compose down

  # Job 6: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: Deploy to staging server or cloud platform
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test logic here

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        
    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check logic here

  # Job 8: Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Run performance tests
      run: |
        # Start the application
        python gradio_app.py &
        sleep 30
        
        # Run performance tests with Locust
        locust -f tests/performance/locustfile.py --host=http://localhost:7860 --headless --users 10 --spawn-rate 2 --run-time 60s
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: locust-report.html

  # Job 9: Documentation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        
    - name: Generate documentation
      run: |
        # Generate API documentation
        sphinx-apidoc -o docs/source src/
        
        # Build documentation
        cd docs && make html
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/build/html/

  # Job 10: Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "All jobs completed successfully!"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "Some jobs failed!"
        # Add failure notification logic 